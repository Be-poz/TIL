# 하이브

하이브는 HDFS에 저장된 대량의 데이터를 분석할 수 있도록 개발되었다.  

하이브는 HDFS에 저장된 데이터에 구조(스키마)를 입히는 방식으로 데이터를 테이블로 구조화시킨다.  
테이블 스키마와 같은 메타데이터는 메타스토어라 불리는 데이터베이스에 저장된다.  

```shell
hive -f script.q		# 지정한 파일에 대해서만 hive 명령어가 실행

hive -e 'SELECT * FROM dummy'		# -e 옵션을 이용하여 명령행에 직접 입력

hive -S -e 'SELECT * FROM dummy'		# -S 옵션을 이용하여 불필요한 메시지의 출력을 막아 출력 결과만 봄
```

![image-20231121000221399](/Users/user/Library/Application Support/typora-user-images/image-20231121000221399.png)

![image-20231121000314671](/Users/user/Library/Application Support/typora-user-images/image-20231121000314671.png)

메타스토어는 하이브 메타데이터의 핵심 저장소다.  
기본적으로 메타데이터 서비스는 하이브 서비스와 동이한 JVM에서 실행되고 로컬 디스크에 저잦ㅇ되는 내장형 더비 데이터베이스 인스턴스를 포함한다.  

내장형 더비 데이터베이스 인스턴스는 한 번에 디스크에 위치한 데이터베이스 파일 하나에만 접근할 수 있다. 이것은 사용자가 동일한 메타스토어를 공유하는 그 순간에 단 하나의 하이브 세션만 사용할 수 있다는 의미다. 두 번째 세션을 시작하면 메타스토어와의 연결을 얻기 위한 시도는 실패하고 에러가 발생한다.  

다중 세션을 위해서는 로컬 메타스토어 방식을 사용해야 한다. 메타스토어 서비스는 하이브 서비스와 동일한 프로세스에서 실행되지만 동일 머신이나 원격 머신에서 별도의 프로세스로 실행되는 데이터베이스와 연결할 수 있다.  

원격 메타스토어라 불리는 다른 메타스토어 설정이 있는데, 하나 이상의 메타스토어 서버가 하이브 서비스와는 별도의 프로세스로 실행된다. 원격 메타스토어를 설정해두면 데이터베이스 계층이 방화벽의 역할을 대신하고, 따라서 클라이언트는 데이터베이스 자격 증명을 더 이상 얻을 필요가 없기 때문에 관리성과 보안성이 더 높아진다.  

<br/>

## 전통적인 DB와의 비교

하이브는 전통적인 DB와 여러면에서 비슷하지만 하이브는 HDFS와 맵리듀스를 기반으로 개발되었다.  

전통적인 DB에서 테이블의 스키마는 데이터를 로드하는 시점에 검증된다. 만일 로드중인 데이터가 스키마에 부합되지 않으면 해당 데이터를 거부한다. 이러한 설계 방식을 쓰기 스키마라고 부른다. DB에 쓰는 시점에 데이터의 스키마를 검증하기 때문이다.  

하이브는 로드 시점이 아니라 쿼리를 실행할 때 그 데이터를 검증한다. 이를 읽기 스키마라고 한다.  

읽기 스키마는 DB 내부 형식으로 데이터를 읽거나 파싱하거나 디스크에 직렬화할 필요가 없기 때문에 초기에 매우 빠른 속도로 데이터를 로드할 수 있다. 따라서 로드 조작을 위해서는 단순히 파일을 복사하거나 이동하기만 하면 된다.  

쓰기 스키마는 DB가 컬럼 단위의 데이터 색인과 압축을 제공하기 때문에 더 빠르게 쿼리를 수행할 수 있다. 하지만 상대적으로 DB에 데이터를 로드하는 시간은 더 오래 걸린다. 더욱이 쿼리가 정해지지 않아서 로드 시점에 스키마를 지정할 수 없고 색인도 적용할 수 없는 경우도 빈번하다. 이런 상황에서는 하이브가 빛을 발하게 된다.  

하이브는 테이블과 파티션 수준의 잠금을 지원한다. 특정 프로세스가 테이블을 읽는 도중에 다른 프로세스가 테이블을 삭제하는 것을 방지할 수 있따. 잠금은 주키퍼에 의해 투명하게 관리되므로 사용자가 직접 주키퍼를 조작하여 잠금을 적용하거나 해제할 수는 없다.  

